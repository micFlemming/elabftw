# circle ci config for elabftw
# https://www.elabftw.net
version: 2.1
# code coverage orb
orbs:
  codecov: codecov/codecov@3.2.2
jobs:
  build:
    working_directory: ~/elabftw/elabftw
    parallelism: 1
    shell: /bin/bash --login
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    docker:
      - image: cimg/base:current
      # ignore login credentials for now
      #  auth:
      #    username: nicolascarpi
      #    password: $DOCKERHUB_PULL_TOKEN
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      COMPOSE_DOCKER_CLI_BUILD: 1
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.12
          # docker_layer_caching: true # DLC will explicitly cache layers here and try to avoid rebuilding.
          # docker_layer_caching is behind a paywall
      - run:
          name: Prepare docker-compose.yml
          # Don't bind mount here, files are copied. See scrutinizer.dockerfile
          # first backslash enables different delimiter than slash
          # remove env_file section
          command: |
            sed -i '\#volumes:#D' tests/docker-compose.yml
            sed -i '\#- \.\.:/elabftw#D' tests/docker-compose.yml
            sed -i '\#/elabftw/tests/_output/coverage#D' tests/docker-compose.yml
            sed -i 's#elabftw/elabimg:hypernext#elabtmp#' tests/docker-compose.yml
            sed -i '\#env_file:#D' tests/docker-compose.yml
            sed -i '\#- elabftw-user\.env#D' tests/docker-compose.yml
      - run:
          name: Build elabtmp image and start containers
          command: |
            docker build -q -t elabtmp -f tests/scrutinizer.dockerfile .
            docker compose --ansi never -f tests/docker-compose.yml up -d --quiet-pull
      # Restore dependency cache
      - restore_cache:
          keys:
            # This branch if available
            - v1-yarn-dep-{{ .Branch }}-{{ checksum "yarn.lock" }}
            # Default branch if not
            - v1-yarn-dep-master-
            # Any branch if there are none on the default branch
            - v1-yarn-dep-
      - run:
          name: Copy dependency cache into container
          command: |
            echo 'export HAS_CACHE="false"' >> $BASH_ENV
            if [ -d ./node_modules ]; then
              docker cp ./node_modules elabtmp:/elabftw/node_modules
            fi
            if [ -d ./yarn.cache ]; then
              docker cp ./yarn.cache elabtmp:/usr/local/share/.cache/yarn/
              echo 'export HAS_CACHE="true"' >> $BASH_ENV
            fi
      - run:
          name: Install JS dependencies
          command: docker exec -it elabtmp yarn install --silent --non-interactive --frozen-lockfile
      - run:
          name: Extract dependency cache from container
          command: |
            if [ "${HAS_CACHE}" == "false" ]; then
              docker cp elabtmp:/elabftw/node_modules/ ./node_modules
              docker cp elabtmp:/usr/local/share/.cache/yarn/ ./yarn.cache
            fi
      # Save dependency cache
      - save_cache:
          key: v1-yarn-dep-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
            - ./yarn.cache
      - run:
          name: Run SCSS linter
          command: docker exec -it elabtmp yarn csslint
      - run:
          name: Run Javascript linter
          command: docker exec -it elabtmp yarn jslint-ci
      - run:
          name: Build all
          command: docker exec -it elabtmp yarn buildall:dev
      - run:
          name: Composer install
          command: docker exec -it elabtmp composer install --no-progress -q
      - run:
          name: Run PHP-CS-Fixer
          command: docker exec -it elabtmp yarn phpcs-dry
      - run:
          name: Prepare php.ini
          # allow tmpfile, used by phpstan
          # extend open_basedir
          # /usr/bin/psalm, //autoload.php, /root/.cache/ are for psalm
          # /usr/bin/phpstan, /proc/cpuinfo is for phpstan, https://github.com/phpstan/phpstan/issues/4427 https://github.com/phpstan/phpstan/issues/2965
          command: |
            docker exec -it elabtmp sed -i 's/tmpfile, //' /etc/php8/php.ini
            docker exec -it elabtmp sed -i 's|^open_basedir*|&:/usr/bin/psalm://autoload\.php:/root/\.cache/:/usr/bin/phpstan:/proc/cpuinfo|' /etc/php8/php.ini
      - run:
          name: "PHP static analysis: psalm + phpsatn"
          command: docker exec -it elabtmp yarn static
      - run:
          name: Install the database
          command: docker exec -it elabtmp bin/install start -r
      - run:
          name: Populate the database
          command: docker exec -it elabtmp bin/console dev:populate tests/populate-config.yml
      - run:
          name: Enable code coverage
          command: docker exec -it elabtmp bash -c "apk add --update php8-pecl-xdebug && echo 'zend_extension=xdebug.so' >> /etc/php8/php.ini && echo 'xdebug.mode=coverage' >> /etc/php8/php.ini"
      - run:
          name: Run unit tests
          command: docker exec -it elabtmp php vendor/bin/codecept run --skip acceptance --skip api --coverage --coverage-xml
      - run:
          name: Extract coverage report
          command: docker cp elabtmp:/elabftw/tests/_output/coverage.xml .
      - codecov/upload:
          file: coverage.xml

workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - demo
                - next
